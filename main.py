#!/usr/bin/env python3

import sys
from bbs import BlumBlumShub
from lcg import LinearCongruentialGenerator
from prime_checker import miller_rabin
from colors import cyan

def main():
  print(cyan("Prime Number Generator"))

  bbs = BlumBlumShub(
    47549311472920909912209319415632546568615171647449776708088515456271882256688655472429960001356598002721056949199289005875090341339535679228762000284695578992694028821429479898585483427123161057642719497767775759219743666776381110838744061389431879168072462318464481040242866241897410149885018525271140808743387765598861025306828071770446075734192300013226299729071396927791922757802315939093736083879788104144364331864519291777448965862396859815581731257814820213290000280532074935599904323257225411772963246498810492981761448004460009228598633053,
    107397595365822977137336244061581024502786353619930520168857195796487927688075184909580315280089385066594856534824324028916873227593184312306380432882318358133946408364432997211883642081142345263913093524717335572775257117166625838352501167314403619745327796928224603118553911877190432477897849958446446909190088634315248524470293658599768274374072505636243343338931450592489529079411012054264332025498428060511919416556838891807530769004624034148341042211078576228613399736180978723912602319129778598464870910571473064783677343206518408119156722081,
    505681814266168811)

  lcg = LinearCongruentialGenerator(  # a, x0, c, m
    25214903917,
    505681814266168811,
    11,
    pow(2,3650) # 60 -> 256 bits; 300 -> 512 bits; 780 -> 1024 bits; 1720 -> 2048 bits; 3650 -> 4096 bits
  )

  print("RUNNING")

  for i in range(0,99999):
    # num = bbs.next()
    num = lcg.next()
    # print(f"\n{num} ({sys.getsizeof(num)*8} bits) (iteration {i+1})")
    if miller_rabin(num):
      print(f"\nPRIME: {num} ({sys.getsizeof(num)*8} bits) (iteration {i+1})")

  print("FINISHED")

if __name__ == "__main__":
  main()
